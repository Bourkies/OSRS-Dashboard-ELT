# ---------------------------------------------------------------------- #
#          EXAMPLE CONFIGURATION - RENAME TO config.toml                 #
# ---------------------------------------------------------------------- #
# This file contains the main configuration for the ETL pipeline.
# Copy this file to "config.toml" and customize it for your environment.

[general]
project_name = "OSRS Discord Dashboard ELT"

[etl_runner]
run_load_script = false

[cleanup_settings]
log_retention_days = 3

[load_settings]
staging_suffix = "_staging"

# --- Username Mapping ---
# Combine multiple usernames into a single target username.
# The rule that appears LATER in this list takes precedence in case of conflict.
[username_mapping]
rules = [
  # { target_username = "CurrentName", source_usernames = ["OldName1", "OldName2"] },
  # { target_username = "PlayerA", source_usernames = ["OldNameA"], end_date = "2025-03-01 00:00" },
]

# --- Fetch & Parse Settings ---
[time_settings]
mode = "automatic"
end_time_offset_minutes = 1
start_time_overlap_minutes = 10
max_lookback_days = 30

[custom_time_range]
custom_start_date = "2025-01-01 00:00"
custom_end_date = "2025-12-31 23:59"

[parse_settings]
mode = "new"

# --- Item Value Overrides ---
# Assign a value to items that are parsed without one (e.g., from Raid Loot broadcasts).
[item_value_overrides]
"Dexterous prayer scroll" = 16000000
"Twisted bow" = 1480000000
"an extraordinary amount of loot" = 2147483647

# --- Dashboard & Report Generation Settings ---
[dashboard_settings]
week_start_day = "Monday"
custom_lookback_days = 14
top_drops_limit = 50

[dashboard_settings.collection_log]
source_types = ["Collection Log", "Valuable Drop", "Raid Loot", "Clue Scroll Item"]
deduplication_type = "Collection Log"

[dashboard_settings.personal_bests]
broadcast_type = "Personal Best"
pb_time_similarity_threshold_seconds = 0.6
pb_grouping_window_seconds = 15
allow_multiple_holders_on_match = false

[dashboard_settings.recent_achievements]
source_types = ["Level Up", "Quest", "Diary", "Combat Task", "Combat Achievement Tier", "Pet"]
limit = 15

# Define your leaderboard, detailed, and timeseries reports below.
# The default structure is provided.

[[dashboard_settings.leaderboard_reports]]
report_name = "valuable_drops_summary"
source_table = "clan_broadcasts"
broadcast_type = "Valuable Drop"
group_by_column = "Username"
aggregations.Count = "Username"
aggregations.Value = "Item_Value"

[[dashboard_settings.detailed_reports]]
report_name_prefix = "valuable_drops_detail"
broadcast_types = ["Valuable Drop", "Clue Scroll Item", "Raid Loot"]

[[dashboard_settings.timeseries_reports]]
report_name = "valuable_drops_timeseries"
broadcast_type = "Valuable Drop"
frequencies = ["6h", "D", "W"]


# --- Database & Parsing Definitions ---
# It is recommended not to change these unless you have a deep understanding of the script.
[databases]
raw_db_uri = "sqlite:///data/raw_data.db"
parsed_db_uri = "sqlite:///data/parsed_data.db"
optimised_db_uri = "sqlite:///data/optimised_data.db"

[database_schema]
clan_broadcasts = { raw_log_id = "INTEGER", Timestamp = "TEXT", Content = "TEXT", Username = "TEXT", Broadcast_Type = "TEXT", Item_Name = "TEXT", Item_Value = "BIGINT", Collection_Log_Progress = "TEXT", Skill = "TEXT", Task_Name = "TEXT", New_Level = "INTEGER", Tier = "TEXT", PB_Time = "TEXT", Source_Mob = "TEXT", Opponent = "TEXT", Pet_Name = "TEXT", Pet_KC = "INTEGER", Pet_KC_Type = "TEXT", Action_By = "TEXT", New_Group_Lives = "TEXT" }
chat = { raw_log_id = "INTEGER", Timestamp = "TEXT", MessageType = "TEXT", Rank = "TEXT", Status = "TEXT", Username = "TEXT", Content = "TEXT" }
unparsed_logs = { raw_log_id = "INTEGER", timestamp = "TEXT", raw_content = "TEXT", failure_reason = "TEXT" }

[patterns]
# All regex patterns follow...
[patterns.Chat]
type = "chat"
regex = '''^<:(\w+):\d+>(?:<:(\w+):\d+>)?\s*\*\*(.*?)\*\*:\s*(.*)'''
columns = ["Rank", "Status", "Username", "Content"]

[patterns.valuable_drop]
broadcast_type = "Valuable Drop"
variants = [
    { regex = '''^(?:<:\w+:\d+>){0,2}\s*(.+?)\s+received a drop: (.*?)\s+\((\d{1,3}(?:,\d{3})*|\d+) coins\) from (.*?)\.?$''', columns = ["Username", "Item_Name", "Item_Value", "Source_Mob"], required_columns = ["Username", "Item_Name", "Item_Value", "Source_Mob"] },
    { regex = '''^(?:<:\w+:\d+>){0,2}\s*(.+?)\s+received a drop: (.*?)\s+\((\d{1,3}(?:,\d{3})*|\d+) coins\)\.?$''', columns = ["Username", "Item_Name", "Item_Value"], required_columns = ["Username", "Item_Name", "Item_Value"] },
    { regex = '''^(.+?)\s+received a rare drop: (.*)$''', columns = ["Username", "Item_Name"], required_columns = ["Username", "Item_Name"] }
]
