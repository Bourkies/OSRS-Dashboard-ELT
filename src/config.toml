# Configuration for the main.py script
# This file should be placed in the 'src' directory.

[general]
# The name of your project, which will appear in log messages.
project_name = "OSRS Discord Game Chat Logger"
# Set to true to enable detailed parsing logs and generate a raw message dump for testing.
debug_mode = true

[time_settings]
# Mode can be "automatic" or "custom".
# "automatic" uses the last run time to fetch new data.
# "custom" uses the specific start and end dates below, useful for testing or backfilling data.
mode = "automatic"

# In automatic mode, how many minutes before the current time should the script stop fetching?
# A value of 5 means if run at 16:30, it fetches messages up to 16:25.
# This ensures we don't miss messages that are in the process of being sent to Discord's servers.
end_time_offset_minutes = 2

# In automatic mode, how many extra minutes should the script go back from the last run?
# This creates a safety overlap to prevent missing any messages.
start_time_overlap_minutes = 10

# On the very first automatic run, how many days back should the script fetch?
max_lookback_days = 30


[custom_time_range]
# These values are ONLY used if mode is set to "custom".
# Format: "YYYY-MM-DD HH:MM"
custom_start_date = "2025-06-09 14:00"
custom_end_date = "2025-06-09 16:00"


[cleanup_settings]
# The maximum number of report folders to keep in the /reports directory.
# The oldest will be deleted to maintain this limit. Set to 0 to disable.
max_report_folders = 50

#-----------------------------------------------------------------------
# Database Schema Definition
#-----------------------------------------------------------------------
[database_schema]
# Added 'Failure_Reason' to help debug unparsed messages.
clan_broadcasts = { Timestamp = "TEXT", Content = "TEXT", Parsed_Successfully = "BOOLEAN", Username = "TEXT", Broadcast_Type = "TEXT", Item_Name = "TEXT", Item_Value = "BIGINT", Collection_Log_Progress = "TEXT", Skill = "TEXT", Task_Name = "TEXT", New_Level = "INTEGER", Tier = "TEXT", PB_Time = "TEXT", Source_Mob = "TEXT", Opponent = "TEXT", Pet_Name = "TEXT", Pet_KC = "INTEGER", Pet_KC_Type = "TEXT", Is_Dupe = "BOOLEAN", Action_By = "TEXT", New_Group_Lives = "TEXT" }
chat = { Timestamp = "TEXT", MessageType = "TEXT", Rank = "TEXT", Status = "TEXT", Username = "TEXT", Content = "TEXT" }


#-----------------------------------------------------------------------
# Message Parsing Patterns (NEW STRUCTURE)
#-----------------------------------------------------------------------
[patterns]

[patterns.Chat]
type = "chat"
regex = '''^<:(\w+):\d+>(?:<:(\w+):\d+>)?\s*\*\*(.*?)\*\*:\s*(.*)'''
columns = ["Rank", "Status", "Username", "Content"]

# --- BROADCAST PATTERN GROUPS ---

[patterns.valuable_drop]
broadcast_type = "Valuable Drop"
variants = [
    { regex = '''^(?:<:\w+:\d+>){0,2}\s*(.+?)\s+received a drop: (.*?)\s+\((\d{1,3}(?:,\d{3})*|\d+) coins\) from (.*?)\.?$''', columns = ["Username", "Item_Name", "Item_Value", "Source_Mob"], required_columns = ["Username", "Item_Name", "Item_Value", "Source_Mob"] },
    { regex = '''^(?:<:\w+:\d+>){0,2}\s*(.+?)\s+received a drop: (.*?)\s+\((\d{1,3}(?:,\d{3})*|\d+) coins\)\.?$''', columns = ["Username", "Item_Name", "Item_Value"], required_columns = ["Username", "Item_Name", "Item_Value"] },
    { regex = '''^(.+?)\s+received a rare drop: (.*)$''', columns = ["Username", "Item_Name"], required_columns = ["Username", "Item_Name"] }
]

[patterns.clue_scroll]
broadcast_type = "Clue Scroll Item"
variants = [
    { regex = '''^(?:<:\w+:\d+>){0,2}\s*(.+?)\s+received a clue item: (.*?)\s+\((\d{1,3}(?:,\d{3})*|\d+) coins\)\.?$''', columns = ["Username", "Item_Name", "Item_Value"], required_columns = ["Username", "Item_Name", "Item_Value"] }
]

[patterns.collection_log]
broadcast_type = "Collection Log"
variants = [
    { regex = '''^(?:<:\w+:\d+>){0,2}\s*(.+?)\s+received a new collection log item: (.*?)\s+\((\d+/\d+)\)$''', columns = ["Username", "Item_Name", "Collection_Log_Progress"], required_columns = ["Username", "Item_Name", "Collection_Log_Progress"] }
]

[patterns.raid_loot]
broadcast_type = "Raid Loot"
variants = [
    { regex = '''^(?:<:\w+:\d+>){0,2}\s*(.+?)\s+received special loot from a raid: (.*?)\.?$''', columns = ["Username", "Item_Name"], required_columns = ["Username", "Item_Name"] }
]

[patterns.pet]
broadcast_type = "Pet"
variants = [
    { regex = '''^(?:<:\w+:\d+>){0,2}\s*(.+?)\s+has a funny feeling.*?:\s+(.*?)\s+at\s+([\d,]+)\s+([\w\s]+)\.$''', columns = ["Username", "Pet_Name", "Pet_KC", "Pet_KC_Type"], required_columns = ["Username", "Pet_Name", "Pet_KC", "Pet_KC_Type"] },
    { regex = '''^(?:<:\w+:\d+>){0,2}\s*(.+?)\s+feels something weird.*?:\s+(.*?)\s+at\s+([\d,]+)\s+([\w\s]+)\.$''', columns = ["Username", "Pet_Name", "Pet_KC", "Pet_KC_Type"], required_columns = ["Username", "Pet_Name", "Pet_KC", "Pet_KC_Type"] },
    { regex = '''^(?:<:\w+:\d+>){0,2}\s*(.+?)\s+has a funny feeling.*?:\s+(.*?)\s+at\s+([\d,]+)\s+([\w\s]+?)\s+\(.*$''', columns = ["Username", "Pet_Name", "Pet_KC", "Pet_KC_Type"], required_columns = ["Username", "Pet_Name", "Pet_KC", "Pet_KC_Type"] }
]

[patterns.level_up]
broadcast_type = "Level Up"
variants = [
    { regex = '''^(?:<:\w+:\d+>){0,2}\s*(.+?)\s+has reached ([\w\s]+) level (\d+)\.?$''', columns = ["Username", "Skill", "New_Level"], required_columns = ["Username", "Skill", "New_Level"] }
]

[patterns.total_level]
broadcast_type = "Total Level"
variants = [
    { regex = '''^(?:<:\w+:\d+>){0,2}\s*(.+?)\s+has reached a total level of (\d+)\.?$''', columns = ["Username", "New_Level"], required_columns = ["Username", "New_Level"] }
]

[patterns.xp_milestone]
broadcast_type = "XP Milestone"
variants = [
    { regex = '''^(?:<:\w+:\d+>){0,2}\s*(.+?)\s+has reached ([\d,]+) XP in ([\w\s]+)\.?$''', columns = ["Username", "New_Level", "Skill"], required_columns = ["Username", "New_Level", "Skill"] }
]

[patterns.quest]
broadcast_type = "Quest"
variants = [
    { regex = '''^(?:<:\w+:\d+>){0,2}\s*(.+?)\s+has completed a quest: (.*?)\.?$''', columns = ["Username", "Task_Name"], required_columns = ["Username", "Task_Name"] }
]

[patterns.diary]
broadcast_type = "Diary"
variants = [
    { regex = '''^(?:<:\w+:\d+>){0,2}\s*(.+?)\s+has completed the (.*?) (.*?) diary\.$''', columns = ["Username", "Tier", "Task_Name"], required_columns = ["Username", "Tier", "Task_Name"] }
]

[patterns.combat_task]
broadcast_type = "Combat Task"
variants = [
    { regex = '''^(?:<:\w+:\d+>){0,2}\s*(.+?)\s+has completed (?:a|an) (.*?) combat task: (.*?)\.?$''', columns = ["Username", "Tier", "Task_Name"], required_columns = ["Username", "Tier", "Task_Name"] }
]

[patterns.personal_best]
broadcast_type = "Personal Best"
variants = [
    { regex = '''^(?:<:\w+:\d+>){0,2}\s*(.+?)\s+has achieved a new (.*?) personal best:\s+([\d:.]+)$''', columns = ["Username", "Task_Name", "PB_Time"], required_columns = ["Username", "Task_Name", "PB_Time"] }
]

[patterns.pvp_kill]
broadcast_type = "PvP Kill"
variants = [
    { regex = '''^(?:<:\w+:\d+>){0,2}\s*(.+?)\s+has defeated (.*?) and received \((\d{1,3}(?:,\d{3})*|\d+) coins\) worth of loot!(.*)$''', columns = ["Username", "Opponent", "Item_Value", "_"], required_columns = ["Username", "Opponent", "Item_Value"] },
    { regex = '''^(?:<:\w+:\d+>){0,2}\s*(.+?)\s+has defeated (.*?), causing (.*?) to lose \((\d{1,3}(?:,\d{3})*|\d+) coins\) worth of loot!(.*)$''', columns = ["Username", "Opponent", "_", "Item_Value", "_"], required_columns = ["Username", "Opponent", "Item_Value"] },
]

[patterns.pvp_death]
broadcast_type = "PvP Death"
variants = [
    { regex = '''^(?:<:\w+:\d+>){0,2}\s*(.+?)\s+has been defeated by (.*?) in The Wilderness and lost \((\d{1,3}(?:,\d{3})*|\d+) coins\) worth of loot(.*)$''', columns = ["Username", "Opponent", "Item_Value", "_"], required_columns = ["Username", "Opponent", "Item_Value"] },
    { regex = '''^(?:<:\w+:\d+>){0,2}\s*(.+?)\s+has been defeated by (.*?) in The Wilderness(.*)$''', columns = ["Username", "Opponent", "_"], required_columns = ["Username", "Opponent"] },
]

[patterns.combat_achievement_tier]
broadcast_type = "Combat Achievement Tier"
variants = [
    { regex = '''^(?:<:\w+:\d+>){0,2}\s*(.+?)\s+has unlocked the (.*?) tier of rewards from Combat Achievements!$''', columns = ["Username", "Tier"], required_columns = ["Username", "Tier"] }
]

[patterns.clan_invite]
broadcast_type = "Clan Invite"
variants = [
    { regex = '''^(?:<:\w+:\d+>){0,2}\s*(.+?)\s+has been invited into the clan by (.*?)\.?$''', columns = ["Username", "Action_By"], required_columns = ["Username", "Action_By"] }
]

[patterns.clan_expelled]
broadcast_type = "Clan Expelled"
variants = [
    { regex = '''^(.+?)\s+has expelled (.+?) from the clan\.?$''', columns = ["Action_By", "Username"], required_columns = ["Action_By", "Username"] }
]

[patterns.clan_left]
broadcast_type = "Clan Left"
variants = [
    { regex = '''^(.+?)\s+has left the clan\.?$''', columns = ["Username"], required_columns = ["Username"] }
]


[patterns.hcgim_life_lost]
broadcast_type = "HCGIM Life Lost"
variants = [
    { regex = '''^(.+?)\s+has died and lost a life\. (.*?) group has .*?(\d+/\d+) lives left\.$''', columns = ["Username", "_", "New_Group_Lives"], required_columns = ["Username", "New_Group_Lives"] }
]
